constexpr i32 leading_zero_count_test() {
    {
        struct test_case {
            u32 in;
            u32 expected;
        };

        test_case cases[] = {
            { 0b0, 0 },
            { 0b1, 31 },
            { 0b10, 30 },
            { 0b100, 29 },
            { 0b1000, 28 },
            { 0b10000, 27 },
            { 0b100000, 26 },
            { 0b1000000, 25 },
            { 0b10000000, 24 },
            { 0b100000000, 23 },
            { 0b1000000000, 22 },
            { 0b10000000000, 21 },
            { 0b100000000000, 20 },
            { 0b1000000000000, 19 },
            { 0b10000000000000, 18 },
            { 0b100000000000000, 17 },
            { 0b1000000000000000, 16 },
            { 0b10000000000000000, 15 },
            { 0b100000000000000000, 14 },
            { 0b1000000000000000000, 13 },
            { 0b10000000000000000000, 12 },
            { 0b100000000000000000000, 11 },
            { 0b1000000000000000000000, 10 },
            { 0b10000000000000000000000, 9 },
            { 0b100000000000000000000000, 8 },
            { 0b1000000000000000000000000, 7 },
            { 0b10000000000000000000000000, 6 },
            { 0b100000000000000000000000000, 5 },
            { 0b1000000000000000000000000000, 4 },
            { 0b10000000000000000000000000000, 3 },
            { 0b100000000000000000000000000000, 2 },
            { 0b1000000000000000000000000000000, 1 },
            { 0b10000000000000000000000000000000, 0 },
        };

        executeTestTable("leading zero count failed for u32 at index: ", cases, [](auto& c, const char* cErr) {
            Assert(core::i_leading_zero_count(c.in) == c.expected, cErr);
        });
    }

    {
        struct test_case {
            i32 in;
            u32 expected;
        };

        test_case cases[] = {
            { 0b0, 0 },
            { 0b1, 31 },
            { 0b10, 30 },
            { 0b100, 29 },
            { 0b1000, 28 },
            { 0b10000, 27 },
            { 0b100000, 26 },
            { 0b1000000, 25 },
            { 0b10000000, 24 },
            { 0b100000000, 23 },
            { 0b1000000000, 22 },
            { 0b10000000000, 21 },
            { 0b100000000000, 20 },
            { 0b1000000000000, 19 },
            { 0b10000000000000, 18 },
            { 0b100000000000000, 17 },
            { 0b1000000000000000, 16 },
            { 0b10000000000000000, 15 },
            { 0b100000000000000000, 14 },
            { 0b1000000000000000000, 13 },
            { 0b10000000000000000000, 12 },
            { 0b100000000000000000000, 11 },
            { 0b1000000000000000000000, 10 },
            { 0b10000000000000000000000, 9 },
            { 0b100000000000000000000000, 8 },
            { 0b1000000000000000000000000, 7 },
            { 0b10000000000000000000000000, 6 },
            { 0b100000000000000000000000000, 5 },
            { 0b1000000000000000000000000000, 4 },
            { 0b10000000000000000000000000000, 3 },
            { 0b100000000000000000000000000000, 2 },
            { 0b1000000000000000000000000000000, 1 },
            { -1, 0 },
        };

        executeTestTable("leading zero count failed for i32 at index: ", cases, [](auto& c, const char* cErr) {
            Assert(core::i_leading_zero_count(c.in) == c.expected, cErr);
        });
    }

    {
        struct test_case {
            u64 in;
            u32 expected;
        };

        test_case cases[] = {
            { 0b0, 0 },
            { 0b1, 63 },
            { 0b10, 62 },
            { 0b100, 61 },
            { 0b1000, 60 },
            { 0b10000, 59 },
            { 0b100000, 58 },
            { 0b1000000, 57 },
            { 0b10000000, 56 },
            { 0b100000000, 55 },
            { 0b1000000000, 54 },
            { 0b10000000000, 53 },
            { 0b100000000000, 52 },
            { 0b1000000000000, 51 },
            { 0b10000000000000, 50 },
            { 0b100000000000000, 49 },
            { 0b1000000000000000, 48 },
            { 0b10000000000000000, 47 },
            { 0b100000000000000000, 46 },
            { 0b1000000000000000000, 45 },
            { 0b10000000000000000000, 44 },
            { 0b100000000000000000000, 43 },
            { 0b1000000000000000000000, 42 },
            { 0b10000000000000000000000, 41 },
            { 0b100000000000000000000000, 40 },
            { 0b1000000000000000000000000, 39 },
            { 0b10000000000000000000000000, 38 },
            { 0b100000000000000000000000000, 37 },
            { 0b1000000000000000000000000000, 36 },
            { 0b10000000000000000000000000000, 35 },
            { 0b100000000000000000000000000000, 34 },
            { 0b1000000000000000000000000000000, 33 },
            { 0b10000000000000000000000000000000, 32 },
            { 0b100000000000000000000000000000000, 31 },
            { 0b1000000000000000000000000000000000, 30 },
            { 0b10000000000000000000000000000000000, 29 },
            { 0b100000000000000000000000000000000000, 28 },
            { 0b1000000000000000000000000000000000000, 27 },
            { 0b10000000000000000000000000000000000000, 26 },
            { 0b100000000000000000000000000000000000000, 25 },
            { 0b1000000000000000000000000000000000000000, 24 },
            { 0b10000000000000000000000000000000000000000, 23 },
            { 0b100000000000000000000000000000000000000000, 22 },
            { 0b1000000000000000000000000000000000000000000, 21 },
            { 0b10000000000000000000000000000000000000000000, 20 },
            { 0b100000000000000000000000000000000000000000000, 19 },
            { 0b1000000000000000000000000000000000000000000000, 18 },
            { 0b10000000000000000000000000000000000000000000000, 17 },
            { 0b100000000000000000000000000000000000000000000000, 16 },
            { 0b1000000000000000000000000000000000000000000000000, 15 },
            { 0b10000000000000000000000000000000000000000000000000, 14 },
            { 0b100000000000000000000000000000000000000000000000000, 13 },
            { 0b1000000000000000000000000000000000000000000000000000, 12 },
            { 0b10000000000000000000000000000000000000000000000000000, 11 },
            { 0b100000000000000000000000000000000000000000000000000000, 10 },
            { 0b1000000000000000000000000000000000000000000000000000000, 9 },
            { 0b10000000000000000000000000000000000000000000000000000000, 8 },
            { 0b100000000000000000000000000000000000000000000000000000000, 7 },
            { 0b1000000000000000000000000000000000000000000000000000000000, 6 },
            { 0b10000000000000000000000000000000000000000000000000000000000, 5 },
            { 0b100000000000000000000000000000000000000000000000000000000000, 4 },
            { 0b1000000000000000000000000000000000000000000000000000000000000, 3 },
            { 0b10000000000000000000000000000000000000000000000000000000000000, 2 },
            { 0b100000000000000000000000000000000000000000000000000000000000000, 1 },
            { 0b1000000000000000000000000000000000000000000000000000000000000000, 0 },
        };

        executeTestTable("leading zero count failed for u64 at index: ", cases, [](auto& c, const char* cErr) {
            Assert(core::i_leading_zero_count(c.in) == c.expected, cErr);
        });
    }

    {
        struct test_case {
            i64 in;
            u32 expected;
        };

        test_case cases[] = {
            { 0b0, 0 },
            { 0b1, 63 },
            { 0b10, 62 },
            { 0b100, 61 },
            { 0b1000, 60 },
            { 0b10000, 59 },
            { 0b100000, 58 },
            { 0b1000000, 57 },
            { 0b10000000, 56 },
            { 0b100000000, 55 },
            { 0b1000000000, 54 },
            { 0b10000000000, 53 },
            { 0b100000000000, 52 },
            { 0b1000000000000, 51 },
            { 0b10000000000000, 50 },
            { 0b100000000000000, 49 },
            { 0b1000000000000000, 48 },
            { 0b10000000000000000, 47 },
            { 0b100000000000000000, 46 },
            { 0b1000000000000000000, 45 },
            { 0b10000000000000000000, 44 },
            { 0b100000000000000000000, 43 },
            { 0b1000000000000000000000, 42 },
            { 0b10000000000000000000000, 41 },
            { 0b100000000000000000000000, 40 },
            { 0b1000000000000000000000000, 39 },
            { 0b10000000000000000000000000, 38 },
            { 0b100000000000000000000000000, 37 },
            { 0b1000000000000000000000000000, 36 },
            { 0b10000000000000000000000000000, 35 },
            { 0b100000000000000000000000000000, 34 },
            { 0b1000000000000000000000000000000, 33 },
            { 0b10000000000000000000000000000000, 32 },
            { 0b100000000000000000000000000000000, 31 },
            { 0b1000000000000000000000000000000000, 30 },
            { 0b10000000000000000000000000000000000, 29 },
            { 0b100000000000000000000000000000000000, 28 },
            { 0b1000000000000000000000000000000000000, 27 },
            { 0b10000000000000000000000000000000000000, 26 },
            { 0b100000000000000000000000000000000000000, 25 },
            { 0b1000000000000000000000000000000000000000, 24 },
            { 0b10000000000000000000000000000000000000000, 23 },
            { 0b100000000000000000000000000000000000000000, 22 },
            { 0b1000000000000000000000000000000000000000000, 21 },
            { 0b10000000000000000000000000000000000000000000, 20 },
            { 0b100000000000000000000000000000000000000000000, 19 },
            { 0b1000000000000000000000000000000000000000000000, 18 },
            { 0b10000000000000000000000000000000000000000000000, 17 },
            { 0b100000000000000000000000000000000000000000000000, 16 },
            { 0b1000000000000000000000000000000000000000000000000, 15 },
            { 0b10000000000000000000000000000000000000000000000000, 14 },
            { 0b100000000000000000000000000000000000000000000000000, 13 },
            { 0b1000000000000000000000000000000000000000000000000000, 12 },
            { 0b10000000000000000000000000000000000000000000000000000, 11 },
            { 0b100000000000000000000000000000000000000000000000000000, 10 },
            { 0b1000000000000000000000000000000000000000000000000000000, 9 },
            { 0b10000000000000000000000000000000000000000000000000000000, 8 },
            { 0b100000000000000000000000000000000000000000000000000000000, 7 },
            { 0b1000000000000000000000000000000000000000000000000000000000, 6 },
            { 0b10000000000000000000000000000000000000000000000000000000000, 5 },
            { 0b100000000000000000000000000000000000000000000000000000000000, 4 },
            { 0b1000000000000000000000000000000000000000000000000000000000000, 3 },
            { 0b10000000000000000000000000000000000000000000000000000000000000, 2 },
            { 0b100000000000000000000000000000000000000000000000000000000000000, 1 },
            { -1, 0 },
        };

        executeTestTable("leading zero count failed for i64 at index: ", cases, [](auto& c, const char* cErr) {
            Assert(core::i_leading_zero_count(c.in) == c.expected, cErr);
        });
    }

    return 0;
}

i32 run_intrinsics_tests_suite() {
    RunTest(leading_zero_count_test);

    return 0;
}

constexpr i32 run_compiletime_intrinsics_tests_suite() {
    RunTestCompileTime(leading_zero_count_test);

    return 0;
}
